Dictionaries
============

So far we've seen some basic data types: integers, floating-point
numbers, and strings. And we've played around with lists, which let
you group similar items together. Lists are the classic example of a
*compound* data type, which just means something that contains other
things.

But Python has another really handy data type hidden up its sleeve:
dictionaries. As the name suggests, dictionaries are used to look
things up. Specifically, a dictionary associates *keys* with *values*.

initialization
--------------

Here's an example of using dictionaries to implement ... a dictionary!

  meaning = {
      "apple": "round edible fruit",
      "computer": "electronic device that drives people crazy",
      "window": "glass fitted in a wall",
      "python": "large tropical snake",
      }

Now I've got a dictionary where I can lookup the meaning of four
different words.

accessing elements
------------------

Here's an example of looking up a word:

  print "the meaning of 'computer' is: " + meaning["computer"]

Notice how this looks just like looking values up in a list, except
the key is not an integer. It can be almost any value, although
strings are most common.

adding elements
---------------

You can add new elements to a dictionary:

  meaning["ruby"] = "attractive semi-precious gem"
  meaning["macintosh"] = "a variety of apple"

how many?
---------

Just like with strings and lists, you can use the len() function to
find out how big a dictionary is:

  len(meaning)
  print "I know the meaning of " + str(len(meaning)) + " words"

replacing elements
------------------

You can replace existing values:

  print "the old meaning of 'python' is: " + meaning["python"]
  meaning["python"] = "a popular programming language"
  print "the new meaning of 'python' is: " + meaning["python"]

another example
---------------

There are lots of other uses for dictionaries. Let's say you can never
remember who plays what instrument in your favourite band. Make a
dictionary to help you remember:

  band = {
    "bass": "Geddy Lee",
    "vocals": "Geddy Lee",
    "guitar": "Alex Lifeson",
    "drums": "Neal Peart",
  }
  print "the best bass player in the world is " + band["bass"]

Notice how the same value can occur multiple times. That's important
to understand: each *key* is unique, but values can repeat.

We can add more entries to the dictionary:

  band["keyboards"] = "Geddy Lee"

Now the dictionary is a bit bigger:

  len(band)

Keep in mind that this is the number of *keys* in the dictionary, in
this case the number of instruments in the band. It's *not* the number
of people in the band; that's different.

iterating
---------

Like a list, you can iterate over a dictionary. Unlike a list, you
iterate over the *keys* rather than the *values*:

  for instrument in band:
      print "this band has " + instrument

Of course, your loop is a lot more useful if you lookup the value
associated with each key:

  for instrument in band:
      player = band[instrument]
      print player + " does " + instrument

methods
-------

Finally, every dictionary has a couple of handy *methods* that you can
use to get more information about it.

Waitasec: what's a method? A method is just a function that's attached
to some object. It will return different values depending on which
object it's attached to.

First example: I want to see the keys of a dictionary:

  print band.keys()

I can use the same method on a different object, and I get a different
result:

  print meaning.keys()

Another method, which is complementary to keys(), is values():

  print band.values()
  print meaning.values()

Dictionaries have lots of other methods, and you can read about them
in the manual for Python's standard library. Come to think of it,
lists and strings also have lots of handy methods, and they're also
documented in the standard library manual.
